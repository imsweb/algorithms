/*
 * Copyright (C) 2013 Information Management Services, Inc.
 */
package lab;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

import org.apache.commons.lang3.math.NumberUtils;

import com.opencsv.CSVReaderBuilder;
import com.opencsv.CSVWriter;

import com.imsweb.algorithms.napiia.NapiiaResultsDto;
import com.imsweb.algorithms.napiia.NapiiaUtils;
import com.imsweb.layout.LayoutFactory;
import com.imsweb.layout.record.fixed.naaccr.NaaccrLayout;

// use this class to compare results from SAS and SEER*Utils...
@SuppressWarnings("UnusedDeclaration")
public class NapiiaLab {

    public static void main(String[] args) throws Exception {
        //createTestingData();
        //runSeerUtilsVersion();
        compareOutputsWithSas();
        //compareOutputsWithDms();
        //countInputRecords();
    }

    private static void createTestingData() throws IOException {
        List<Map<String, String>> list = new ArrayList<>();
        for (String[] row : new CSVReaderBuilder(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream("tools-test-data/testNAPIIA.csv"))).withSkipLines(1).build()
                .readAll()) {
            Map<String, String> rec = new HashMap<>();
            rec.put(NapiiaUtils.PROP_RACE1, row[0]);
            rec.put(NapiiaUtils.PROP_RACE2, row[1]);
            rec.put(NapiiaUtils.PROP_RACE3, row[2]);
            rec.put(NapiiaUtils.PROP_RACE4, row[3]);
            rec.put(NapiiaUtils.PROP_RACE5, row[4]);
            rec.put(NapiiaUtils.PROP_SPANISH_HISPANIC_ORIGIN, row[5]);
            rec.put(NapiiaUtils.PROP_BIRTH_PLACE_COUNTRY, row[6]);
            rec.put(NapiiaUtils.PROP_SEX, row[7]);
            rec.put(NapiiaUtils.PROP_NAME_LAST, row[8]);
            rec.put(NapiiaUtils.PROP_NAME_MAIDEN, row[9]);
            rec.put(NapiiaUtils.PROP_NAME_FIRST, row[10]);

            String napiia = row[11];
            Boolean review = Boolean.valueOf(row[12]);
            String reason = row[13];

            NapiiaResultsDto results = NapiiaUtils.computeNapiia(rec);
            if (!napiia.equals(results.getNapiiaValue())) {
                System.out.println("Wrong Napiia Value for " + Arrays.asList(row) + " returned value is: '" + results.getNapiiaValue() + "'");
                System.out.println("Versus expected value of: '" + napiia + "'");
            }
            if (!review.equals(results.getNeedsHumanReview()))
                System.out.println("Wrong Needs human review value for " + Arrays.asList(row));
            if (results.getNeedsHumanReview() && !reason.equals(results.getReasonForReview()))
                System.out.println("Wrong Reason for review Value for " + Arrays.asList(row));
            rec.put("napiia", napiia);
            rec.put("needs_human_review", row[12]);
            rec.put("reason _for_review", reason);
            list.add(rec);
        }

        NaaccrLayout layout = (NaaccrLayout)LayoutFactory.getLayout(LayoutFactory.LAYOUT_ID_NAACCR_13_ABSTRACT);
        layout.writeRecords(new File("E:\\Project Docs\\Nhappia docs\\napiia-seerutils-results.txt"), list);
        for (Map<String, String> rec : list) {
            rec.remove("napiia");
            rec.remove("needs_human_review");
            rec.remove("reason_for_review");
        }
        layout.writeRecords(new File("H:\\NHAPIIA\\napiia-test.txt"), list);
    }

    private static void runSeerUtilsVersion() throws Exception {
        File input = new File("E:\\Project Docs\\Nhappia docs\\sensitive\\napiia-test.txt");

        File output = new File("E:\\Project Docs\\Nhappia docs\\sensitive\\napiia-seerutils-results.txt");

        //this file will be compared against the excel file generated by sas
        File theseNeedHumanReview = new File("E:\\Project Docs\\Nhappia docs\\sensitive\\napiia-seerutils-human-review.csv");
        List<String[]> needsHumanReview = new ArrayList<>();

        LineNumberReader reader = new LineNumberReader(new InputStreamReader(createInputStream(input, null)));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(createOutputStream(output)));

        NaaccrLayout absLayout = (NaaccrLayout)LayoutFactory.getLayout(LayoutFactory.LAYOUT_ID_NAACCR_13_ABSTRACT);

        String line = reader.readLine();
        while (line != null) {
            Map<String, String> rec = absLayout.createRecordFromLine(line);
            rec.put("napiia", NapiiaUtils.computeNapiia(rec).getNapiiaValue());
            absLayout.writeRecord(writer, rec);
            //if human review required
            if (NapiiaUtils.computeNapiia(rec).getNeedsHumanReview()) {
                needsHumanReview.add(new String[] {rec.get("patientIdNumber"), rec.get("race1"), rec.get("race2"), rec.get("race3"), rec.get("race4"), rec.get("race5"), rec.get("nameLast"), rec.get(
                        "nameFirst"), rec.get("nameMaiden"), NapiiaUtils.computeNapiia(rec).getReasonForReview()});
            }
            line = reader.readLine();
        }
        reader.close();
        writer.close();

        CSVWriter reviewWriter = new CSVWriter(new FileWriter(theseNeedHumanReview));
        reviewWriter.writeAll(needsHumanReview);
        reviewWriter.close();
    }

    //compare sas and seerutils output
    private static void compareOutputsWithSas() throws Exception {
        File sasResults = new File("H:\\NHAPIIA\\napiia-results.txt");
        File javaResults = new File("E:\\Project Docs\\Nhappia docs\\sensitive\\napiia-seerutils-results.txt");
        LineNumberReader sasReader = new LineNumberReader(new InputStreamReader(createInputStream(sasResults, null)));
        LineNumberReader javaReader = new LineNumberReader(new InputStreamReader(createInputStream(javaResults, null)));
        String sasLine = sasReader.readLine();
        String javaLine = javaReader.readLine();
        NaaccrLayout layout = (NaaccrLayout)LayoutFactory.getLayout(LayoutFactory.LAYOUT_ID_NAACCR_13_ABSTRACT);
        long totalCases = 0;
        long diff = 0;
        while (sasLine != null && javaLine != null) {
            Map<String, String> sasRec = layout.createRecordFromLine(sasLine);
            Map<String, String> javaRec = layout.createRecordFromLine(javaLine);

            //this code is added because sometimes the test files have bad lines. You should comment this out if you are testing fake data without patient id number (like testNAPIIA.csv)
            if (javaRec.get("patientIdNumber") == null || !NumberUtils.isDigits(javaRec.get("patientIdNumber"))) {
                javaLine = javaReader.readLine();
                continue;
            }

            if (sasRec.get("patientIdNumber") == null || !NumberUtils.isDigits(sasRec.get("patientIdNumber"))) {
                sasLine = sasReader.readLine();
                continue;
            }
            if (Integer.valueOf(javaRec.get("patientIdNumber")) > Integer.valueOf(sasRec.get("patientIdNumber"))) {
                while (!javaRec.get("patientIdNumber").equals(sasRec.get("patientIdNumber"))) {
                    sasLine = sasReader.readLine();
                    sasRec = layout.createRecordFromLine(sasLine);
                }
            }
            if (Integer.valueOf(sasRec.get("patientIdNumber")) > Integer.valueOf(javaRec.get("patientIdNumber"))) {
                while (!sasRec.get("patientIdNumber").equals(javaRec.get("patientIdNumber"))) {
                    javaLine = javaReader.readLine();
                    javaRec = layout.createRecordFromLine(javaLine);
                }
            }

            totalCases++;
            if (sasRec.get("napiia") == null ? javaRec.get("napiia") != null : !sasRec.get("napiia").equals(javaRec.get("napiia"))) {
                diff++;
                //Put the output inside the if statement if there are differences, I put it here first to see everything is going well
                System.out.println("Patient Id        " + sasRec.get("patientIdNumber") + "\t" + javaRec.get("patientIdNumber"));
                System.out.println("Race1             " + sasRec.get(NapiiaUtils.PROP_RACE1) + "\t" + javaRec.get(NapiiaUtils.PROP_RACE1));
                System.out.println("Race2             " + sasRec.get(NapiiaUtils.PROP_RACE2) + "\t" + javaRec.get(NapiiaUtils.PROP_RACE2));
                System.out.println("Race3             " + sasRec.get(NapiiaUtils.PROP_RACE3) + "\t" + javaRec.get(NapiiaUtils.PROP_RACE3));
                System.out.println("Race4             " + sasRec.get(NapiiaUtils.PROP_RACE4) + "\t" + javaRec.get(NapiiaUtils.PROP_RACE4));
                System.out.println("Race5             " + sasRec.get(NapiiaUtils.PROP_RACE5) + "\t" + javaRec.get(NapiiaUtils.PROP_RACE5));
                System.out.println("Span/Hisp Orgn    " + sasRec.get(NapiiaUtils.PROP_SPANISH_HISPANIC_ORIGIN) + "\t" + javaRec.get(NapiiaUtils.PROP_SPANISH_HISPANIC_ORIGIN));
                System.out.println("Birthplace        " + sasRec.get(NapiiaUtils.PROP_BIRTH_PLACE_COUNTRY) + "\t" + javaRec.get(NapiiaUtils.PROP_BIRTH_PLACE_COUNTRY));
                System.out.println("Sex               " + sasRec.get(NapiiaUtils.PROP_SEX) + "\t" + javaRec.get(NapiiaUtils.PROP_SEX));
                System.out.println("Last name         " + sasRec.get(NapiiaUtils.PROP_NAME_LAST) + "\t" + javaRec.get(NapiiaUtils.PROP_NAME_LAST));
                System.out.println("Maiden name       " + sasRec.get(NapiiaUtils.PROP_NAME_MAIDEN) + "\t" + javaRec.get(NapiiaUtils.PROP_NAME_MAIDEN));
                System.out.println("First name        " + sasRec.get(NapiiaUtils.PROP_NAME_FIRST) + "\t" + javaRec.get(NapiiaUtils.PROP_NAME_FIRST));
                System.out.println("Napiia            " + sasRec.get("napiia") + "\t" + javaRec.get("napiia"));
                System.out.println("..................................................");
            }
            sasLine = sasReader.readLine();
            javaLine = javaReader.readLine();
        }
        System.out.println("Napiia:  " + totalCases + " cases tested! and " + diff + " cases failed!");
    }

    //compare DMS and seerutils output
    private static void compareOutputsWithDms() throws Exception {

        File dmsOutput = new File("E:\\Project Docs\\Nhappia docs\\sensitive\\se.items.txt");
        LineNumberReader reader = new LineNumberReader(new InputStreamReader(createInputStream(dmsOutput, null)));
        NaaccrLayout layout = (NaaccrLayout)LayoutFactory.getLayout(LayoutFactory.LAYOUT_ID_NAACCR_13_ABSTRACT);
        List<Map<String, String>> patient = new ArrayList<>();
        String currentPatIdNum = null;
        String line = reader.readLine();
        long totalCases = 0;
        while (line != null) {
            totalCases++;
            Map<String, String> rec = layout.createRecordFromLine(line);
            String patIdNum = rec.get("patientIdNumber");
            if (patIdNum != null && !patIdNum.equals(currentPatIdNum)) {
                if (!patient.isEmpty())
                    handlePatient(patient, reader.getLineNumber() - 1);
                patient.clear();
                currentPatIdNum = patIdNum;
            }
            if (patIdNum != null)
                patient.add(rec);
            line = reader.readLine();
        }
        if (!patient.isEmpty())
            handlePatient(patient, reader.getLineNumber());
        reader.close();
        System.out.println("NAPIIA: " + totalCases + " cases tested!");
    }

    private static void handlePatient(List<Map<String, String>> patient, long lineNumber) {
        //dont forget to change the option based on the registry
        String utilsNapiia = NapiiaUtils.computeNapiia(patient).getNapiiaValue();
        for (Map<String, String> record : patient) {
            if (record.get("napiia") == null ? utilsNapiia != null : !record.get("napiia").equals(utilsNapiia)) {
                System.out.println("Line Number       " + lineNumber);
                System.out.println("Patient Id        " + record.get("patientIdNumber"));
                System.out.println("Race1             " + record.get(NapiiaUtils.PROP_RACE1));
                System.out.println("Race2             " + record.get(NapiiaUtils.PROP_RACE2));
                System.out.println("Race3             " + record.get(NapiiaUtils.PROP_RACE3));
                System.out.println("Race4             " + record.get(NapiiaUtils.PROP_RACE4));
                System.out.println("Race5             " + record.get(NapiiaUtils.PROP_RACE5));
                System.out.println("Span/Hisp Orgn    " + record.get(NapiiaUtils.PROP_SPANISH_HISPANIC_ORIGIN));
                System.out.println("Birthplace        " + record.get(NapiiaUtils.PROP_BIRTH_PLACE_COUNTRY));
                System.out.println("Sex               " + record.get(NapiiaUtils.PROP_SEX));
                System.out.println("Last name         " + record.get(NapiiaUtils.PROP_NAME_LAST));
                System.out.println("Maiden name       " + record.get(NapiiaUtils.PROP_NAME_MAIDEN));
                System.out.println("First name        " + record.get(NapiiaUtils.PROP_NAME_FIRST));
                System.out.println("Napiia            " + record.get("napiia") + "\t" + utilsNapiia);
                System.out.println("...........................................");
            }
        }
    }

    //count original number of cases
    private static void countInputRecords() throws Exception {
        File input = new File("E:\\Project Docs\\Nhappia docs\\sensitive\\napiia-test.txt");
        LineNumberReader reader = new LineNumberReader(new InputStreamReader(createInputStream(input, null)));
        NaaccrLayout absLayout = (NaaccrLayout)LayoutFactory.getLayout(LayoutFactory.LAYOUT_ID_NAACCR_13_ABSTRACT);
        Map<String, String> rec = absLayout.readNextRecord(reader);
        long count = 0;
        while (rec != null) {
            count++;
            rec = absLayout.readNextRecord(reader);
        }
        System.out.println(count + " cases for testing!");
    }

    private static InputStream createInputStream(File file, String zipEntryToUse) throws IOException {
        if (file == null || !file.exists())
            throw new IOException("File does not exist.");

        String name = file.getName().toLowerCase();

        InputStream is;
        if (name.endsWith(".gz") || name.endsWith(".gzip"))
            is = new GZIPInputStream(new FileInputStream(file));
        else if (name.endsWith(".zip")) {
            ZipFile zipFile = new ZipFile(file);
            Enumeration<? extends ZipEntry> entries = zipFile.entries();
            // count the number of entries
            List<String> list = new ArrayList<>();
            while (entries.hasMoreElements())
                list.add(entries.nextElement().getName());
            // can't be empty
            if (list.isEmpty())
                throw new IOException("Zip file is empty.");
            InputStream tmp;
            // if only one, just take that one...
            if (list.size() == 1)
                zipEntryToUse = list.get(0);

            if (list.contains(zipEntryToUse))
                tmp = zipFile.getInputStream(zipFile.getEntry(zipEntryToUse));
            else
                throw new IOException("Zip file contains more than one file.");

            // zip file could contain another compressed file; we are only supporting gzip or uncompressed!
            if ((zipEntryToUse.endsWith(".gz") || zipEntryToUse.endsWith(".gzip")))
                is = new GZIPInputStream(tmp);
            else if (zipEntryToUse.endsWith(".zip"))
                throw new IOException("Zip files inside zip files is not supported.");
            else
                is = tmp;
        }
        else
            is = new FileInputStream(file);

        return is;
    }

    private static OutputStream createOutputStream(File file) throws IOException {
        OutputStream os;

        String name = file.getName().toLowerCase();

        if (name.endsWith(".gz") || name.endsWith(".gzip"))
            os = new GZIPOutputStream(new FileOutputStream(file));
        else if (name.endsWith(".zip"))
            os = new ZipOutputStream(new FileOutputStream(file));
        else
            os = new FileOutputStream(file);

        return os;
    }
}
